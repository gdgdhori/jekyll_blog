#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages
#+TITLE: チャート式Ruby class[3] if, case, array, each by leap year
#+AUTHOR: Shigeto R. Nishitani
#+EMAIL:     (concat "nishitani@kwansei.ac.jp")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2

#+SETUPFILE: ~/.emacs.d/org-mode/theme-readtheorg.setup


* if-elsif-else-end
** お題はうるう年
うるう年の課題ってやったことありますよね．

#+begin_example
入力がうるう年(leap year)かどうかを表示するプログラムをかけ．
1. うるう年は4で割り切れる数の年．ただし，
2. 100で割り切れる年はうるう年でなく，
3. 400で割り切れる年はうるう年．
4. 2004, 1999, 1900, 2000で試せ．
5. それぞれtrue, false, false, true
#+end_example
この条件分岐をあらかじめ考えて実装するのってきつくなかったですか？
そいつをテスト駆動開発の順を追って見てもらいましょう．

** 簡単な解説:if-elsif-else-end
[[https://docs.ruby-lang.org/ja/index.html]]を読んで見てください．
これは，オブジェクト指向スクリプト言語 Ruby リファレンスマニュアルです．
文法は，rubyの使っているversionに合わせて中身を見てください．
そいつを開けて，「Rubyの文法:制御構造」の「条件分岐if」に「文法」として
次のような記述があります．
#+begin_src ruby
if 式 [then]
  式 ...
[elsif 式 [then]
  式 ... ]
...
[else
  式 ... ]
end
#+end_src
その解説を「読めばわかる」と思うかもしれませんが，例を見るほうがいいかも．
ただし，上の表現で[]は省略可能箇所を示しています．
従って，最小で
#+begin_src ruby
if year%4==0 then
  p 'not leap year'
end
#+end_src
とかになります．さらにthenは省略可能で，ifをつなげるのはelsifです．

** 詳しい解法:2004年はleap year
まずお題の4,5は振る舞いを記述する仕様(specification, spec)ではないですよね．例えば，
: ruby check_leap_year.rb 2004
とした時に
: true
と返ってきてほしいというテストの仕様です．

2004年の振る舞いだけを実装すると，

#+caption: ./codes/check_leap_2004.rb 2004
#+include: "./codes/check_leap_2004.rb"

です．これをtestすると
#+begin_example
> ruby check_leap_2004.rb 2004
2004
true
#+end_example
となります．

** 類題:1999はfalse
次に1999をtestすると
#+begin_example
> ruby check_leap_0.rb 1999
1999
#+end_example
です．これをfalseと返すようにすると，
#+caption: check_leap_2004_1999.rb
#+include: "./codes/check_leap_2004_1999.rb"
ちゃんと返ってます？

* array, each
** お題:テストの自動化
この後，さらにテストの内容が増えてくると，
いちいち引数(ARGV[0])で全てチェックするのが面倒になってきそうでしょ．
lazy programmerは二つ以上は耐えられません．
そこで，テストを自動化をしなさい．

なに，配列にしてloopで回すだけです．
#+begin_src ruby
[2004, 1999].each do |year|
  p year
  if year%4 == 0
    p true
  else
    p false
  end
end
#+end_src

** 簡単な解説: array, each
先ほどの[[https://docs.ruby-lang.org/ja/index.html]]で
何かを探すときはるりまサーチ(全文検索)へ行ってください．
そこで，Array#eachと検索を掛けてください．
#+begin_src ruby
各要素に対してブロックを評価します。

ブロックが与えられなかった場合は、自身と each から生成した
Enumerator オブジェクトを返します。

[1, 2, 3].each do |i|
puts i
end
#=> 1
2
3
#+end_src
この記法では，出力が#=>以下に記されています．

配列Arrayは[]で定義されます．
その中身を順番に処理するときには，上記のような
気泡が用いられます．rubyでdo-loop内で使う値は'|i|'
のように縦棒で挟まれた変数名に入っていきます．
これはmethodで引数名を参照するのに似せた構文です．

** 詳しい解法1:1900はtrue? いえいえfalse
では次の
: 100で割り切れる年はうるう年でなく，
ですが，1900はtrueが返って来るのをfalseが返るように変更します．

まずはテストの修正
#+begin_src ruby
[1900, 2004, 1999].each do |year|
#+end_src

次に100で割り切れる場合の処理です．
#+begin_src ruby
  if year%100 == 0
    p false
  end
#+end_src
なんですが，これをどこに入れるかで悩んでしまいます．
とりあえず別処理として前に付け加えておくと，
#+caption: codes/check_leap_1900_2004_1999.rb
#+include: "codes/check_leap_1900_2004_1999.rb"

そしてtestです．
#+begin_example
> ruby check_leap_1900_2004_1999.rb 
1900
false
2004
true
1999
false
#+end_example
うまいこと動いていますよね．
** 詳しい解法2:refactoring 条件式の単純化
先ほどの条件式は二つに完全に分けています．
でも，論理的にネスト(入れ子)にする方がいい場合もあります．
#+begin_src ruby
[1900,2004,1999].each do |year|
  p year
  if year % 100 ==0
    p false
  else
    if year % 4 == 0
      p true
    else
      p false
    end
  end
end
#+end_src
ですが，ここまでするとif 100 else .. endのelseを省略できることがわかるでしょ．
そうすると，
#+begin_src ruby
[1900,2004,1999].each do |year|
  p year
  if year % 100 ==0
    p false
  elsif year % 4 == 0
    p true
  else
    p false
  end
end
#+end_src
となります．
** 類題:そして2000はtrue！
最後の
: 3. 400で割り切れる年はうるう年．
です．2000年はtrue?

** 類題:refactoring_methodに
次はmethodにしたくなりますよね．関数の名前はleap?
としましょう．

#+caption: codes/check_leap_year_method.rb
#+include: "./codes/check_leap_year_method.rb"
です．true falseを返して，main loopでpする方がいいです．

* caseで
** お題:case
ここまででも十分に綺麗なのですが，もっと綺麗にかけます．
caseを使って短くせよ．

** 簡単な解説
先ほどの[[https://docs.ruby-lang.org/ja/2.5.0/doc/spec=2fcontrol.html#if][reference manualのif]]の下の方にcaseの解説があります．文法は
#+begin_src ruby
case [式]
[when 式 [, 式] ...[, `*' 式] [then]
  式..]..
[when `*' 式 [then]
  式..]..
[else
  式..]
end
#+end_src
です．そこにある例も参照してください．
ちょっと例と違うのは，普通は0番の式を共通にして一致判定をするのですが，
それを省略して一致判定をしてもいいというところです．

** 類題
ちゃんと動くのは，
#+begin_src ruby
def leap?(year)
  case
  when year % 400 ==0 ; return true
  when year % 100 ==0 ; return false
  when year % 4 ==0 ;   return true
  else ;                 return false
  end
end
#+end_src
です．

* もっとすごいtdd
上の知識があると全く逆からのtddも可能です．
#+begin_src ruby
def leap?(year)
  case 
  when year == 2000 ; p true
  when year == 1900 ; p false
  when year == 2004 ; p true
  else              ; p false
  end
end
#+end_src
ですよね．この後，より一般化して，
: 2000 -> % 400 == 0
とかにしても問題ありません．

さらに，
#+begin_src ruby
def leap?(year)
  return case
         when year % 400 ==0 ; true
         when year % 100 ==0 ; false
         when year % 4 ==0   ; true
         else                ; false
         end
end
#+end_src
とするといいかも．これは確認済み．

* テストをmain loopに書くこと
こういう風に，main loopにテストを書くのは正しいのでしょうか？
大学の課題ならいざ知らず，会社でこんなことしていいんでしょうか？

いいんですよ．

昔は推奨されていたぐらいですから．
leap?関数がどのような振る舞いをするべきかを仕様(spec)として書いておくと，
関数を使う人にも，関数を改良する人にも，関数を探している人にも便利ですよね．
そういう仕様は，どこにおけばいいんでしょう？
関数の置き場所にできるだけ近いところがいいと思いませんか？
なら，main loopでしょ．

TDDのバイブルのKent Beck本でもxUnitというのをmain loopに．．
あ，違うな．でも工夫しましょ．
