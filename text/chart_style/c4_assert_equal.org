#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages
#+TITLE: チャート式Ruby class[4] assert_equal
#+AUTHOR: Shigeto R. Nishitani
#+EMAIL:     (concat "nishitani@kwansei.ac.jp")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2

#+SETUPFILE: ~/.emacs.d/org-mode/theme-readtheorg.setup

* お題:assert_equal
テスト駆動開発で今後の学習を進めて行くんですが，
その根本となるassert_equalを作って置きます．
assert equalとはequalかどうかを確かめる(assert)関数です．
どんなのでもいいんですが，自分で作ると好きにできますんで，
その様子を見てもらいましょう．

* 解法:red,green
まずは1==1です．
#+begin_example
> ruby assert_equal.rb
ruby: No such file or directory -- assert_equal.rb (LoadError)
#+end_example
もちろんないんで，それをemacsします．
#+begin_src ruby
p 1==1
#+end_src
として見ましょう．
#+begin_example
> ruby assert_equal.rb
true
#+end_example
と返ってきてますか？

これをmethodにします．英語の感覚だと，
: assert equal expected and result
とでもなるでしょうか．なんで，
: assert_equal(expected, result)
という感じです．まずはred
#+begin_src ruby
p assert_equal(1, 1)
#+end_src
として見ましょう．
#+begin_example
> ruby assert_equal.rb
assert_equal.rb:1:in `<main>': undefined method `assert_equal' for main:Object (NoMethodError)
#+end_example
関数がないと怒られますよね．
それなら，
#+begin_src ruby
def assert_equal(expected, result)
  return expected == result
end

p assert_equal(1, 1)
#+end_src
なら動くし，ちゃんとtrueが返ってますよね．

* 解説:colorize-出色の継承-
これだけだと，殺風景なんで，red, green, refactoringという標語に
したがって動作するように変えます．
肝は，colorizeです．

#+begin_src ruby
require 'colorize'

def assert_equal(expected, result)
  if expected == result
    puts 'true'.green
  else
    puts 'false'.red
  end
end

assert_equal(1, 1)
#+end_src
どうです．greenでしょ？

ならtestにredも付け加えて置きましょう．
: assert_equal(1, 2)
redでしょ？

colorizeというgem libraryがないと怒られたなら
#+begin_example
> gem install colorize
#+end_example
でinstallしてください．
関学のproxyで引っかかっている人は，
: > gem install colorize -r -p http://proxy.ksc.kwansei.ac.jp:8080
してください．

gemというのはrubyのlibraryを管理するシステムです．
色々出せますんで，試してみてください．

#+begin_src ruby
> irb
irb(main):001:0> require 'colorize'
=> true
irb(main):002:0> String.colors
=> [:black, :light_black, :red, :light_red, :green, :light_green, :yellow, :light_yellow, :blue, :light_blue, :magenta, :light_magenta, :cyan, :light_cyan, :white, :light_white, :default]
#+end_src
colorizeは，ruby標準のString classに色を表示するmethodを上載せ(override)します．
こんなのがすぐに使えて色々あるのがrubyです．いや，object思考です．

* 改良:richer output
もう少し出力をrichにしましょう．
- 引数でとってきた，expected, resultの値をそのまま出力
- どうなったかを記述
  - true :: print "succeeded in assert_equal.\n".green
  - false :: print "failed in assert_equal.\n".red

どうです．できました？
#+caption: assert_equal_richer_output.rb, Not Yet and Need Revise.
#+include: "codes/assert_equal.rb"
* 拡張:assert_not_equal
: assert_not_equal(1, 2)
を考えましょう．まずはtestです．上のんを入れて実行して見ましょう．
#+begin_example
> ruby assert_equal.rb
expected :: 1
result   :: 1
succeeded in assert_equal.
expected :: 1
result   :: 2
failed in assert_equal.
assert_equal.rb:15:in `<main>': undefined method `assert_not_equal' for main:Object (NoMethodError)
Did you mean?  assert_equal
#+end_example
なんかが返ってくるでしょうか．関数がないと怒られます．
まずはcopy & pasteします．
関数名だけassert_equalからassert_not_equalに直しましょう．
#+begin_example
expected :: 1
result   :: 2
failed in assert_equal.
#+end_example
となります．このままだと，振る舞いがおかしいですよね．
修正します．
#+begin_example
expected :: 1
result   :: 2
succeeded in assert_not_equal.
#+end_example
となればOKです．
#+caption: assert_not_equal.rb, Not Yet and Need Revise.
#+include: "codes/assert_equal.rb"

* 整理:重複箇所の整理
重複している箇所は整理して，別立ての関数にしてください．
#+caption: ./assert_not_equal_with_puts.rb, Not Yet and Need Revise.
#+include: "./codes/assert_equal.rb"

* 補足:重複実行の予防
このcodeは今後繰り返し使っています．
そのためには，requireで呼び出す必要があります．
同じdirectoryに写(copy)して使うようにします．

例えば，
#+begin_src ruby
require './assert_equal'

assert_equal(2, 1*2)
assert_not_equal('bob', 'bob2')
#+end_src
というように使います．

しかし，今のままだとassert_equal.rbに書いたテストがそのまま実行されてしまいます．
そこで，そういうのを回避してくれるidiom(熟語)があります．
#+begin_src ruby
if $PROGRAM_NAME == __FILE__
  assert_equal(1, 1)
  assert_equal(1, 2)
  assert_not_equal(1, 2)
  assert_not_equal(1, 1)
end
#+end_src
です．意味は，codeが書いてあるファイル名(__FILE__)が，
動いているファイル名($PROGRAM_NAME)と
一致したら中身を実行です．
これはidiomなんで...覚えてください．あ，ここに書いてあるということをね．

#+caption: codes/assert_equal_final.rb, Not Yet and Need Revise.
#+include: "codes/assert_equal.rb"
