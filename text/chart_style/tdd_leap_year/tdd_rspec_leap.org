#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages
#+TITLE:  tdd to rspec
#+AUTHOR:  Shigeto R. Nishitani
#+EMAIL:     (concat "nishitani@kwansei.ac.jp")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:2 num:2
#+SETUPFILE: /Users/bob/Github/ornb/lib/theme-readtheorg.setup

#+STARTUP: indent 
#+OPTIONS: ^:{}

* specとしたら
では，どう書けばいいでしょう？
できるだけ人が読んでわかる情報をおきたいですよね．
#+begin_example 
leap?関数は年を受け取って，うるう年かどうかを真偽値で返す．
[2004, 1999, 1900, 2000]に対して[true, false, false, true]を返す．
#+end_example
となるでしょう．

こいつをrspecというtesting frameworkで実装すると
- [[./check_leap/check_leap_spec.rb]]
#+begin_src ruby
describe "leap?" do
  it 'check the year leap or not' do
    expected = [true, false, false, true]
    [2004, 1999, 1900, 2000].each_with_index do |year, i|
      print year.to_s+", "
      expect(leap?(year)).to eq expected[i]
    end
  end
end
#+end_src
となります．DSL(domain specific language)なんでrubyの文法からは
外れていますが，なんとなく上に書いたleap?の仕様にならっているのが
わかります？　

rubyではなくrspecで走らせてみると，
#+begin_src ruby
> rspec check_leap_spec.rb
leap?
2004, 1999, 1900, 2000,   check the year leap or not

Finished in 0.00312 seconds (files took 0.13577 seconds to load)
1 example, 0 failures
#+end_src
となります．rspecがないと怒られた人は，
: gem install rspec
してください．

この時，
#+include: "check_leap/.rspec"
として少し「みば」をよくしています．
こいつの設定は大津がバリバリなんで，takaki0403に問い合わせてください．

* rspecの掟
ここまでくると，このままでは少し困難が生じてきます．
rubyで走らせようとするとおかしくなります．
#+begin_example
> ruby check_leap_spec.rb 
check_leap_spec.rb:17:in `<main>': undefined method `describe' for main:Object (NoMethodError)
#+end_example
main の部分をrspecに合うように変えましたから．．．そこで

| 実行目的         | コマンド                | コード                               |
| code(lib)        | require 'hoge'          | [[./check_leap/lib/check_leap.rb]]       |
| application(cli) | exe/hoge                | [[./check_leap/exe/check_leap]]          |
| test             | rspec spec/hoge_test.rb | [[./check_leap/spec/check_leap_spec.rb]] |

とします．こいつはシステムが大きくなって，code書く人とテストする人が
別れて来ると重要になります．粒度の話をどこかでするんですが，
コンピュータ言語を習得する時に，小さい単位から
1. 文法
1. 熟語，イディオム
1. method
1. class
1. pattern
などという大きなサイズまで習得すべきスキルとか，デザインが変わってきます．
このサイズのことを「粒度」と読んでいますが，これは建築の分野から入ってきた
概念です．

で，小さい粒度で仕事している間は，置き場所とかframeとかは無視してもいいんですよ．
でもシステムが大きくなって分業が進むとそういうわけにも行きません．
大工さんはどこの粒度でもどこの現場でも同じ仕事をしますよね．
それが，掟ってやつです．
「守破離」て茶道や剣道にはありましたが，
それを今softwareの世界ではbest practiceって読んでいます．
おいおい，こういうスキルは身についてくるんで，
まずは「 *テスト駆動開発* っていうやり方がある」ことを心に留めておいてください．

* 注：あるいは研究課題
本当に置き場所を分散することがbest practiceなのかは考える必要があります．
programmerとtesterがいるから別れているのでしょうが，本来はprogrammerが
責任を持ってspecを書くべきです．それならば同じファイルの中でcode, exec, specが
ある方がいいのではないでしょうか．誰かそういうDSLを作ってくれると嬉しいんですが．．．

#+begin_example
require ”hge.rb"
ruby hoge.rb
rspec hoge.rb
#+end_example
で振る舞いが違うと最高！！
callerってのを使うと意外と楽に実装できるかも．．．
