#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages
#+TITLE:  third lesson for ruby novice -- test --
#+AUTHOR:  Shigeto R. Nishitani
#+EMAIL:     (concat "nishitani@kwansei.ac.jp")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:2 num:2
#+SETUPFILE: ~/.emacs.d/org-mode/theme-readtheorg.setup

#+STARTUP: indent 
#+OPTIONS: ^:{}

* 初めからframe work?
テストの重要性はある程度認識していると思います.
ただ，巷にあるテキストはTDDのためのframe workを使いなさいとなっていて面倒そうです．
でも本当は，テスト駆動でのcodingは，とっても簡単で便利というのを見てもらいましょう．

* テスト駆動の実際
** お題はうるう年
うるう年の課題ってやったことありますよね．

#+begin_example
うるう年(leap year)かどうかを表示するプログラムをかけ．
1. うるう年は4で割り切れる数の年．ただし，
2. 100で割り切れる年はうるう年でなく，
3. 400で割り切れる年はうるう年．
4. 2004, 1999, 1900, 2000で試せ．
5. それぞれtrue, false, false, true
#+end_example
この条件分岐をあらかじめ考えて実装するのってきつくなかったですか？
そいつを順を追って見てもらいましょう．
** 2004年はleap year
まず4,5は振る舞いを記述する仕様(specification, spec)ではないですよね．例えば，
: ruby check_leap_year.rb 2004
とした時に
: true
と返ってきてほしいというテストの仕様です．

2004年の振る舞いだけを実装すると，

#+begin_src ruby
p year = ARGV[0].to_i
if year % 4 == 0
  p true
end
#+end_src

です．これをtestすると
#+begin_example
> ruby check_leap_0.rb 2004
2004
true
#+end_example
となります．

** 1999はfalse
次に1999をtestすると
#+begin_example
> ruby check_leap_0.rb 1999
1999
#+end_example
です．これをfalseと返すようにすると，
#+begin_src ruby
p year = ARGV[0].to_i
if year%4 == 0
  p true
else
  p false
end
#+end_src

ちゃんと返ってます？

** テストの自動化
この後，さらにテストの内容が増えてくると，
いちいち引数(ARGV[0])で全てチェックするのが面倒になってきそうでしょ．
lazy programmerは二つ以上は耐えられません．
そこで，テストの自動化をします．

なに，配列にしてloopで回すだけです．
#+begin_src ruby
[2004, 1999].each do |year|
  p year
  if year%4 == 0
    p true
  else
    p false
  end
end
#+end_src


** 1900はtrue? いえいえfalse
では次の
: 100で割り切れる年はうるう年でなく，
ですが，1900はtrueが返って来るのをfalseが返るように変更します．

まずはテストの修正
#+begin_src ruby
[1900, 2004, 1999].each do |year|
#+end_src

次に100で割り切れる場合の処理です．
#+begin_src ruby
  if year%100 == 0
    p false
  end
#+end_src
何ですが，これをどこに入れるかで悩んでしまいます．
とりあえず別処理として前に付け加えておくと，
#+begin_src ruby
[1900,2004,1999].each do |year|
  p year
  if year % 100 ==0
    p false
    next
  end
  if year % 4 == 0
    p true
  else
    p false
  end
end
#+end_src
そしてtestです．
#+begin_example
bash-3.2$ ruby check_leap_year_19_0.rb 
1900
false
2004
true
1999
false
#+end_example
うまいこと動いていますよね．
** refactoring 条件式の単純化
先ほどの条件式は二つに完全に分けています．
でも，論理的にネスト(入れ子)にする方がいい場合もあります．
#+begin_src ruby
[1900,2004,1999].each do |year|
  p year
  if year % 100 ==0
    p false
  else
    if year % 4 == 0
      p true
    else
      p false
    end
  end
end
#+end_src
ですが，ここまでするとif 100 else .. endのelseを省略できることがわかるでしょ．
そうすると，
#+begin_src ruby
[1900,2004,1999].each do |year|
  p year
  if year % 100 ==0
    p false
  elsif year % 4 == 0
    p true
  else
    p false
  end
end
#+end_src
となります．
** そして2000はtrue！
最後の
: 3. 400で割り切れる年はうるう年．
です．2000年はtrue?

* refactoring:methodに
次はmethodにしたくなりますよね．関数の名前はleap?
としましょう．

#+begin_src ruby
def leap?(year)
  if year % 400 ==0
    p true
  elsif year % 100 ==0
    p false
  elsif year % 4 == 0
    p true
  else
    p false
  end 
end
[2000, 1900, 2004, 1999].each do |year|
  p year
  leap?(year)
end
#+end_src
です．true falseを返して，main loopでpする方がいいです．

* caseで
ここまででも十分に綺麗なのですが，もっと綺麗にかけます．
caseを使います．
#+begin_src ruby
def leap?(year)
  case year
  when % 400 ==0
    p true
  when % 100 ==0
    p false
  when % 4 == 0
    p true
  else
    p false
  end
end
#+end_src
when以降には論理値があればいいので，こういう書き方ができます．
嘘です．動きません．
こんななります．
#+begin_example
> ruby check_leap_year_19_case_wrong.rb 
2000
false
1900
false
2004
false
1999
false
#+end_example
* とやり過ぎ
調子こきました．間違いです．ごめんなさい．
ちゃんと結果見てませんでした．だからgreenが必要です．
これは次のとこで．

ちゃんと動くのは，
#+begin_src ruby
def leap?(year)
  case
  when year % 400 ==0 ; return true
  when year % 100 ==0 ; return false
  when year % 4 ==0 ;   return true
  else ;                 return false
  end
end
#+end_src
でした．

どっかでこういうのを見たことがあるもんやから，
うまくいったと思ってました．ごめんなさい．

* もっとすごいtdd
上の知識があると全く逆からのtddも可能です．
#+begin_src ruby
def leap?(year)
  case 
  when year == 2000 ; p true
  when year == 1900 ; p false
  when year == 2004 ; p true
  else              ; p false
  end
end
#+end_src
ですよね．この後，より一般化して，
: 2000 -> % 400 == 0
とかにしても問題ありません．

さらに，
#+begin_src ruby
def leap?(year)
  return case
         when year % 400 ==0 ; true
         when year % 100 ==0 ; false
         when year % 4 ==0   ; true
         else                ; false
         end
end
#+end_src
とするといいかも．これは確認済み．

* テストをmain loopに書くこと
こういう風に，main loopにテストを書くのは正しいのでしょうか？
大学の課題ならいざ知らず，会社でこんなことしていいんでしょうか？

いいんですよ．

昔は推奨されていたぐらいですから．
leap?関数がどのような振る舞いをするべきかを仕様(spec)として書いておくと，
関数を使う人にも，関数を改良する人にも，関数を探している人にも便利ですよね．
そういう仕様は，どこにおけばいいんでしょう？
関数の置き場所にできるだけ近いところがいいと思いませんか？
なら，main loopでしょ．

TDDのバイブルのKent Beck本でもxUnitというのをmain loopに．．
あ，違うな．でも工夫しましょ．
